echo "# 6666" >> README.md
66666
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/ShieldofZues/document.git
git push -u origin master
Git提供了一个命令git reflog用来记录你的每一次命令：

新建本地分支：git branch 本地分支名
切换至本地分支：git checkout 本地分支名
查看所有分支：git branch -vv
git log --pretty=oneline  查看历史记录版本  在Git中，用HEAD表示当前版本
回退上一个版本
$ git reset --hard HEAD^
回退上上一个版本
$ git reset --hard HEAD^^
回退100个版本
HEAD~100
使用命令git reset --hard commit_id。
用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：
命令gitcheckout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销（注意有--）
要查看远程库的信息，用git remote -v

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

因此，多人协作的工作模式通常是这样：
1.      首先，可以试图用git push origin branch-name推送自己的修改；
2.      如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
3.      如果合并有冲突，则解决冲突，并在本地提交；
4.      没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-nameorigin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

敲命令gittag <name>就可以打一个新标签：

Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
